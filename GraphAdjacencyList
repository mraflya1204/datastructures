#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<iterator>
using namespace std;

void insertEdge(vector<int> adjList[], int v1, int v2);
void BFS(vector<int> adjList[], int V, int start);
void DFS(vector<int> adjList[], int V, int start);

int main(){
    int V = 4;
    vector<int> adjList[V];

    insertEdge(adjList, 0, 1);
    insertEdge(adjList, 0, 2);
    insertEdge(adjList, 1, 2);
    insertEdge(adjList, 2, 3);
    
    for (int i = 0; i < V; ++i) {
        cout <<  i << "=> ";
        for (int j = 0; j < adjList[i].size(); ++j) {
            cout << adjList[i][j] << " ";
        }
        cout << endl;
    }

    cout << "BFS traversal starting from vertex 0:" << endl;
    BFS(adjList, V, 0);

    cout << "DFS traversal starting from vertex 0:" << endl;
    DFS(adjList, V, 0);

    return 0;
}

void insertEdge(vector<int> adjList[], int v1, int v2){
    adjList[v1].push_back(v2);
    adjList[v2].push_back(v1); 
}

void BFS(vector<int> adjList[], int V, int start){
    vector<bool> visited(V, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int current = q.front();
        cout << current << " ";
        q.pop();

        for (int i = 0; i < adjList[current].size(); ++i) {
            int neighbor = adjList[current][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
    cout << endl;
}

void DFS(vector<int> adjList[], int V, int start) {
    vector<bool> visited(V, false);
    stack<int> stack;

    visited[start] = true;
    stack.push(start);
    
    while (!stack.empty()) {
        int current = stack.top();
        stack.pop();
        cout << current << " ";

        for (int i = 0; i < adjList[current].size(); ++i) {
            int neighbor = adjList[current][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                stack.push(neighbor);
            }
        }
    }
    cout << endl;
}
